/** Shopify CDN: Minification failed

Line 16:0 Transforming const to the configured target environment ("es5") is not supported yet
Line 18:1 Transforming async functions to the configured target environment ("es5") is not supported yet
Line 21:2 Transforming const to the configured target environment ("es5") is not supported yet
Line 22:2 Transforming const to the configured target environment ("es5") is not supported yet
Line 22:8 Transforming destructuring to the configured target environment ("es5") is not supported yet
Line 25:2 Transforming let to the configured target environment ("es5") is not supported yet
Line 40:14 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 40:15 Transforming destructuring to the configured target environment ("es5") is not supported yet
Line 44:18 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
Line 60:31 Transforming object literal extensions to the configured target environment ("es5") is not supported yet
... and 16 more hidden warnings

**/
const INDEX_NAME = 'prod_products';

(async function(algolia) {
  'use strict';

  const getAlgoliaResults = algolia.externals.getAlgoliaResults;
  const { config, translations, headerTemplate, productTemplate, footerTemplate } = algolia;

  // Filters for stock policy
  let stockPolicyFilter = '';

  if (algolia.config.stock_policy === 'deny') {
    // For 'deny' we will filter out all items based on inventory quantity
    stockPolicyFilter = 'inventory_quantity > 0';
  } else if (algolia.config.stock_policy === 'continue') {
    /**
     * For 'continue' we will filter on `inventory_available` attribute whose
     * value is dependent on:
     * `inventory_quantity > 0 OR inventory_policy == 'continue'`
     */
    stockPolicyFilter = 'inventory_available:true';
  }

  algolia.productsPlugin = {
    getSources({ query, setContext }) {
      return [
        {
          sourceId: 'products',
          getItems() {
            return getAlgoliaResults({
              searchClient: algolia.searchClient,
              queries: [
                {
                  indexName: INDEX_NAME,
                  query,
                  params: {
                    hitsPerPage: config.products_autocomplete_hits_per_page,
                    clickAnalytics: config.analytics_enabled,
                    // filters: stockPolicyFilter,
                    filters: [stockPolicyFilter,(query ? '' : 'collections:best-selling-seven-days')].filter(Boolean).join(' AND '),
                    distinct: algolia.config.show_products
                  },
                },
              ],
              transformResponse({ results, hits }) {
                setContext({
                  nbProducts: results[0].nbHits,
                });
                return hits;
              },
            });
          },
          templates: {
            header({ html, state }) {
              const resource = translations.products;
              return headerTemplate({ html, state }, resource);
            },
            item({ item, html, components }) {
              const distinct = config.show_products;
              const variantInfo = !distinct && item.objectID !== item.id ? `?variant=${item.objectID}` : '';
              const itemLink = `${window.Shopify.routes.root}products/${item.handle}${variantInfo}`;
              
              const getConversionData = (e, {
                __autocomplete_indexName: index,
                __autocomplete_queryID: queryID,
                objectID,
                model_no: modelNo,
                brand,
                title,
              }) => {
                if (!algolia.config.analytics_enabled) return;
                /**
                 * Uncomment the following function call to start storing data in
                 * local storage for conversion tracking
                 */
                algolia.saveForConversionTracking({
                  index,
                  eventName: 'Added to cart',
                  queryID,
                  objectIDs: [objectID],
                  modelNo,
                  brand,
                  title,
                });
              }
              return productTemplate({ item, html, components }, distinct, itemLink, getConversionData);
            },
            footer({ state, html }){
              const {autocomplete_see_all, products_autocomplete_hits_per_page} = config;
              const showFooter = autocomplete_see_all && state.context.nbProducts > products_autocomplete_hits_per_page
              return showFooter && footerTemplate({ html, state });
            },
          },
        }
      ];
    },
  }
})(window.algoliaShopify);
